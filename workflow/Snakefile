include: "rules/common.smk"

import os
import logging
import random
import string
import configparser
from typing import Dict, List, Optional
from tempfile import TemporaryDirectory
#import pysam
from functools import wraps


def read_selected_genes_table(fn: str) -> List[str]:
    """
    Read selected genes file.

    Returns:
        list[str]: A list of selected gene names.

    Args:
        fn (str): Selected genes file.
    """
    selected_genes = []
    with open(fn) as f:
        for gene in f: 
            gene = gene.strip()
            selected_genes.append(gene)

    return selected_genes


vartype=["snvs", "indels"]
filtertype="recalibrated" if config["filtering"]["vqsr"] else "hardfiltered"

#selected_genes_table = "{project_dir}/{sample}/intervals/SUMMARY/SELECTED_GENES.txt"

#selected_genes = read_selected_genes_table(selected_genes_table)













##############################
from typing import Dict, List, Optional
import pandas as pd
import numpy as np

def read_gene_table(fn: str) -> Dict[str, Dict[str, str]]:
    """
    Read gene table file.

    Returns:
        dict[str, dict[str, str]]: Gene table object.

    Args:
        fn (str): Gene table file.

    Examples:

        >>> gene_table = read_gene_table("gene_table.txt")
        >>> print(gene_table["cyp2d6"]["hg19_start"])
        42522500
    """

    result = {}

    with open(fn) as f:
        header = next(f).strip().split("\t")

        for line in f:
            fields = line.strip().split("\t")
            name = fields[1]
            result[name] = dict(zip(header, fields))

    return result

def get_gene_table() -> Dict[str, Dict[str, str]]:
    """
    Get gene table object.

    Returns:
        dict[str, dict[str, str]]: Gene table object.
    """

    return read_gene_table("workflow/resources/stargazer/gene_table.txt")

def get_target_genes() -> List[str]:
    """Get the list of target gene names.

    Returns:
        list[str]: A list of gene names.
    """
    gene_table = get_gene_table()
    return [k for k, v in gene_table.items() if v["type"] == "target"]

def get_target_region(tg: str, gb: str) -> str:
    """Get the genomic region for the target gene.

    Returns:
        str: Genomic region.

    Args:
        tg (str): Target gene.
        gb (str): Genome build (hg19, hg38).
    """
    gene_table = get_gene_table()
    target_genes = [k for k, v in gene_table.items() if v["type"] == "target"]

    if tg not in target_genes:
        raise ValueError(f"'{tg}' is not among target genes: {target_genes}")

    return gene_table[tg][f"{gb}_region"]

##############################
stargazer_target_genes = get_target_genes()
    
if config["params"]["stargazer"]["target_genes"] == "ALL":
    selected_genes = stargazer_target_genes
else:
    selected_genes = []
    for gene in config["params"]["stargazer"]["target_genes"].split(","):
        selected_genes.append(gene.strip().lower())
    for gene in selected_genes:
        if gene not in stargazer_target_genes:
            raise ValueError(f"Unrecognized target gene found: {gene}")

##### Target rules #####

rule reference:
    input:
        #expand("{project_dir}/{sample}/dedup/{sample}.bam",  project_dir=config["project_dir"], sample=samples.index)
        #expand("reference/{genome_build}/{genome_build}_variation_noiupac.vcf.gz.tbi", genome_build=config["ref"]["build"])
        #expand("{project_dir}/{sample}/intervals/{contig}.regions.bed", sample=samples.index, project_dir=config["project_dir"])
        #expand("{project_dir}/{sample}/final_vcf/{sample}.vcf.gz", project_dir=config["project_dir"], sample=samples.index)
        #expand("{project_dir}/{sample}/called/{sample}.g.vcf.gz", project_dir=config["project_dir"], sample=samples.index, contig=get_contigs())
        #expand("reference/{genome_build}/{genome_build}.fasta.fai", genome_build=config["ref"]["build"])
        #expand("{project_dir}/{sample}/final_vcf/{sample}.vcf.gz", project_dir=config["project_dir"], sample=samples.index),
        #expand("{project_dir}/{sample}/qc/multiqc/multiqc.html", project_dir=config["project_dir"], sample=samples.index)        
        #"resources/{genome_build}/{genome_build}.sa".format(genome_build=config["ref"]["build"])
        #"reference/{genome_build}/{genome_build}.fasta.fai".format(genome_build=config["ref"]["build"])
        #expand("{project_dir}/{sample}/genotyped/all.vcf.gz", project_dir=config["project_dir"], sample=samples.index)
        #expand("/{sample}/genes/cyp2d6/cyp2d6.g.vcf.gz", sample=samples.index)
        #expand("{project_dir}/{sample}/intervals/cyp2d6.bed", project_dir=config["project_dir"], sample=samples.index)
        #expand("{project_dir}/{sample}/genes/{gene}/{sample}.{gene}.g.vcf.gz", project_dir=config["project_dir"], sample=samples.index, gene="cyp2d6")
        #"reference/{genome_build}/{genome_build}_variation_noiupac.vcf.gz.tbi".format(genome_build="GRCh38")
        #expand("{project_dir}/intervals/SUMMARY/ALL_GENES.bed", project_dir=config["project_dir"], sample=samples.index)
        #expand("{project_dir}/{sample}/recal/{sample}.grp", project_dir=config["project_dir"], sample=samples.index)
        #expand("{project_dir}/{sample}/applybqsr/{sample}.bam", project_dir=config["project_dir"], sample=samples.index)
        #expand("{project_dir}/{sample}/genes/{gene}/final_vcf/{sample}.vcf.gz")
        #expand("{project_dir}/{sample}/genes/{gene}/filtered_vcf/{gene}.{vartype}.{filtertype}.vcf.gz", sample=samples.index, project_dir=config["project_dir"], vartype=["snvs", "indels"], filtertype="recalibrated" if config["filtering"]["vqsr"] else "hardfiltered", gene=selected_genes),
        #expand("{project_dir}/{sample}/genes/{gene}/final_vcf/{gene}.vcf.gz", sample=samples.index, project_dir=config["project_dir"], gene=selected_genes)
        #expand("{project_dir}/{sample}/genes/{gene}/gdf/{gene}.gdf", project_dir=config["project_dir"], sample=samples.index, gene=selected_genes)
        #"{output_dir}/{genome_build}/seq/{genome_build}.fa".format(output_dir=config["ref"]["output_dir"], genome_build=config["ref"]["build"])
        #"{output_dir}/{genome_build}/variation/Mills_and_1000G_gold_standard.indels.vcf.gz".format(output_dir=config["ref"]["output_dir"], genome_build=config["ref"]["build"])
        #"{output_dir}/{genome_build}/variation/dbsnp-153.vcf.gz".format(output_dir=config["ref"]["output_dir"], genome_build=config["ref"]["build"])
        expand("{project_dir}/{sample}/dedup/{sample}.bam", project_dir=config["project_dir"], sample=samples.index),
        expand("{project_dir}/{sample}/applybqsr/{sample}.bam", project_dir=config["project_dir"], sample=samples.index)





#rule all:
#    input:
#        expand("{project_dir}/{sample}/final_vcf/{sample}.vcf.gz", project_dir=config["project_dir"], sample=samples.index),
#        expand("{project_dir}/{sample}/qc/multiqc/multiqc.html", project_dir=config["project_dir"], sample=samples.index),
#        "plots/depths.svg",
#        "plots/allele-freqs.svg"


##### Modules #####

include: "rules/reference.smk"
include: "rules/mapping.smk"
#include: "rules/calling.smk"
#include: "rules/filtering.smk"
#include: "rules/stargazer.smk"
#include: "rules/qc.smk"
#include: "rules/annotation.smk"
